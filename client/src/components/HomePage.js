import { useState, useEffect } from 'react';
import PostCard from './PostCard';
import SearchBar from './SearchBar';
import Pagination from './Pagination';
import LoadingSpinner from './LoadingSpinner';
import { postsAPI } from '../services/api';

const HomePage = () => {
  const [posts, setPosts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [pagination, setPagination] = useState({});
  const [currentPage, setCurrentPage] = useState(1);
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredPosts, setFilteredPosts] = useState([]);

  useEffect(() => {
    fetchPosts(currentPage);
  }, [currentPage]);

  useEffect(() => {
    if (searchTerm) {
      const filtered = posts.filter(post =>
        post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        post.excerpt.toLowerCase().includes(searchTerm.toLowerCase())
      );
      setFilteredPosts(filtered);
    } else {
      setFilteredPosts(posts);
    }
  }, [posts, searchTerm]);

  const fetchPosts = async (page = 1) => {
    try {
      setLoading(true);
      setError(null);
      const response = await postsAPI.getAllPosts(page, 12);
      setPosts(response.data);
      setPagination(response.pagination);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handlePageChange = (page) => {
    setCurrentPage(page);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const handleSearch = (term) => {
    setSearchTerm(term);
  };

  if (loading) {
    return <LoadingSpinner message="Loading posts..." />;
  }

  if (error) {
    return (
      <div className="error">
        <h2>Error Loading Posts</h2>
        <p>{error}</p>
        <button className="btn" onClick={() => fetchPosts(currentPage)}>
          Try Again
        </button>
      </div>
    );
  }

  return (
    <div className="home-page">
      <div className="hero-section">
        <h1 className="hero-title">AI-Powered Blog</h1>
        <p className="hero-subtitle">Discover the latest insights generated by artificial intelligence</p>
      </div>
      
      <SearchBar onSearch={handleSearch} />
      
      {searchTerm && (
        <div className="search-results-info">
          <p>
            {filteredPosts.length > 0 
              ? `Found ${filteredPosts.length} post${filteredPosts.length !== 1 ? 's' : ''} matching "${searchTerm}"`
              : `No posts found matching "${searchTerm}"`
            }
          </p>
        </div>
      )}
      
      {posts.length === 0 && !loading ? (
        <div className="empty-state">
          <h2>No posts available yet</h2>
          <p>Check back soon for AI-generated content!</p>
        </div>
      ) : (
        <>
          <div className="posts-grid">
            {filteredPosts.map((post) => (
              <PostCard key={post._id} post={post} />
            ))}
          </div>

          {!searchTerm && pagination.pages > 1 && (
            <Pagination 
              currentPage={currentPage}
              totalPages={pagination.pages}
              onPageChange={handlePageChange}
            />
          )}
        </>
      )}
    </div>
  );
};

export default HomePage;